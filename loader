-- RCSLib UI Library
-- Modern UI Library for Roblox
local RCSLib = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
repeat wait() until LocalPlayer and LocalPlayer:FindFirstChild("PlayerGui")
local PlayerGui = LocalPlayer.PlayerGui

-- Animation Functions
local function CreateTween(obj, info, properties)
	return TweenService:Create(obj, info, properties)
end

-- Main Window Class
local Window = {}
Window.__index = Window

function RCSLib:CreateWindow(config)
	local self = setmetatable({}, Window)
	
	config = config or {}
	local title = config.Title or "RCSLib"
	local subtitle = config.Subtitle or "UI Library"
	local size = config.Size or {600, 500}
	
	-- Create Main GUI
	self.ScreenGui = Instance.new("ScreenGui")
	self.ScreenGui.Name = "RCSLib_" .. title:gsub("%s+", "")
	self.ScreenGui.ResetOnSpawn = false
	self.ScreenGui.Parent = PlayerGui

	-- Main Window
	self.MainWindow = Instance.new("Frame")
	self.MainWindow.Name = "MainWindow"
	self.MainWindow.Size = UDim2.new(0, size[1], 0, size[2])
	self.MainWindow.Position = UDim2.new(0.5, -size[1]/2, 0.5, -size[2]/2)
	self.MainWindow.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
	self.MainWindow.BorderSizePixel = 0
	self.MainWindow.Parent = self.ScreenGui

	local MainCorner = Instance.new("UICorner")
	MainCorner.CornerRadius = UDim.new(0, 10)
	MainCorner.Parent = self.MainWindow

	local MainStroke = Instance.new("UIStroke")
	MainStroke.Color = Color3.fromRGB(60, 60, 70)
	MainStroke.Thickness = 1
	MainStroke.Parent = self.MainWindow

	-- Sidebar
	self.Sidebar = Instance.new("Frame")
	self.Sidebar.Name = "Sidebar"
	self.Sidebar.Size = UDim2.new(0, 180, 1, 0)
	self.Sidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
	self.Sidebar.BorderSizePixel = 0
	self.Sidebar.Parent = self.MainWindow

	local SidebarCorner = Instance.new("UICorner")
	SidebarCorner.CornerRadius = UDim.new(0, 10)
	SidebarCorner.Parent = self.Sidebar

	-- Sidebar cover for right side
	local SidebarCover = Instance.new("Frame")
	SidebarCover.Size = UDim2.new(0, 10, 1, 0)
	SidebarCover.Position = UDim2.new(1, -10, 0, 0)
	SidebarCover.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
	SidebarCover.BorderSizePixel = 0
	SidebarCover.Parent = self.Sidebar

	-- Title in Sidebar
	local Title = Instance.new("TextLabel")
	Title.Size = UDim2.new(1, -20, 0, 50)
	Title.Position = UDim2.new(0, 10, 0, 15)
	Title.BackgroundTransparency = 1
	Title.Text = title
	Title.Font = Enum.Font.GothamBold
	Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Title.TextSize = 20
	Title.TextXAlignment = Enum.TextXAlignment.Left
	Title.Parent = self.Sidebar

	local Subtitle = Instance.new("TextLabel")
	Subtitle.Size = UDim2.new(1, -20, 0, 20)
	Subtitle.Position = UDim2.new(0, 10, 0, 40)
	Subtitle.BackgroundTransparency = 1
	Subtitle.Text = subtitle
	Subtitle.Font = Enum.Font.Gotham
	Subtitle.TextColor3 = Color3.fromRGB(150, 150, 160)
	Subtitle.TextSize = 12
	Subtitle.TextXAlignment = Enum.TextXAlignment.Left
	Subtitle.Parent = self.Sidebar

	-- Tab Container
	self.TabContainer = Instance.new("Frame")
	self.TabContainer.Size = UDim2.new(1, -20, 1, -80)
	self.TabContainer.Position = UDim2.new(0, 10, 0, 70)
	self.TabContainer.BackgroundTransparency = 1
	self.TabContainer.Parent = self.Sidebar

	local TabLayout = Instance.new("UIListLayout")
	TabLayout.Padding = UDim.new(0, 5)
	TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	TabLayout.Parent = self.TabContainer

	-- Content Area
	self.ContentArea = Instance.new("Frame")
	self.ContentArea.Name = "ContentArea"
	self.ContentArea.Size = UDim2.new(1, -180, 1, 0)
	self.ContentArea.Position = UDim2.new(0, 180, 0, 0)
	self.ContentArea.BackgroundTransparency = 1
	self.ContentArea.Parent = self.MainWindow

	-- Initialize tab system
	self.currentTab = nil
	self.tabs = {}

	-- Setup dragging
	self:SetupDragging()
	
	-- Initial animation
	self:AnimateIn()
	
	return self
end

function Window:SetupDragging()
	local dragging = false
	local dragInput, mousePos, framePos

	local function onInputChanged(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - mousePos
			self.MainWindow.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
		end
	end

	-- Only allow dragging from the sidebar header area
	local DragArea = Instance.new("Frame")
	DragArea.Size = UDim2.new(0, 180, 0, 70)
	DragArea.Position = UDim2.new(0, 0, 0, 0)
	DragArea.BackgroundTransparency = 1
	DragArea.Parent = self.MainWindow

	DragArea.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			mousePos = input.Position
			framePos = self.MainWindow.Position
			
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	DragArea.InputChanged:Connect(function(input)
		if dragging then
			onInputChanged(input)
		end
	end)
end

function Window:AnimateIn()
	local originalSize = self.MainWindow.Size
	local originalPos = self.MainWindow.Position
	
	self.MainWindow.Size = UDim2.new(0, 0, 0, 0)
	self.MainWindow.Position = UDim2.new(0.5, 0, 0.5, 0)

	CreateTween(self.MainWindow, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
		Size = originalSize,
		Position = originalPos
	}):Play()
end

function Window:CreateTab(name, icon, layoutOrder)
	local Tab = {}
	Tab.name = name
	
	-- Tab Button
	local TabButton = Instance.new("TextButton")
	TabButton.Size = UDim2.new(1, 0, 0, 35)
	TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
	TabButton.BackgroundTransparency = 1
	TabButton.BorderSizePixel = 0
	TabButton.Text = ""
	TabButton.LayoutOrder = layoutOrder or 1
	TabButton.Parent = self.TabContainer

	local TabCorner = Instance.new("UICorner")
	TabCorner.CornerRadius = UDim.new(0, 6)
	TabCorner.Parent = TabButton

	local TabLayout = Instance.new("UIListLayout")
	TabLayout.FillDirection = Enum.FillDirection.Horizontal
	TabLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	TabLayout.Padding = UDim.new(0, 8)
	TabLayout.Parent = TabButton

	local TabPadding = Instance.new("UIPadding")
	TabPadding.PaddingLeft = UDim.new(0, 12)
	TabPadding.Parent = TabButton

	local TabIcon = Instance.new("TextLabel")
	TabIcon.Size = UDim2.new(0, 16, 0, 16)
	TabIcon.BackgroundTransparency = 1
	TabIcon.Text = icon or "ðŸ“„"
	TabIcon.Font = Enum.Font.Gotham
	TabIcon.TextColor3 = Color3.fromRGB(150, 150, 160)
	TabIcon.TextSize = 14
	TabIcon.Parent = TabButton

	local TabText = Instance.new("TextLabel")
	TabText.Size = UDim2.new(1, -24, 1, 0)
	TabText.BackgroundTransparency = 1
	TabText.Text = name
	TabText.Font = Enum.Font.GothamMedium
	TabText.TextColor3 = Color3.fromRGB(150, 150, 160)
	TabText.TextSize = 13
	TabText.TextXAlignment = Enum.TextXAlignment.Left
	TabText.Parent = TabButton

	-- Tab Content
	local TabContent = Instance.new("ScrollingFrame")
	TabContent.Size = UDim2.new(1, -20, 1, -20)
	TabContent.Position = UDim2.new(0, 10, 0, 10)
	TabContent.BackgroundTransparency = 1
	TabContent.BorderSizePixel = 0
	TabContent.ScrollBarThickness = 3
	TabContent.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 90)
	TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
	TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
	TabContent.Visible = false
	TabContent.Parent = self.ContentArea

	local ContentLayout = Instance.new("UIListLayout")
	ContentLayout.Padding = UDim.new(0, 15)
	ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
	ContentLayout.Parent = TabContent

	local ContentPadding = Instance.new("UIPadding")
	ContentPadding.PaddingTop = UDim.new(0, 10)
	ContentPadding.Parent = TabContent

	-- Tab Selection Logic
	local function SelectTab()
		-- Deselect all tabs
		for _, tab in pairs(self.tabs) do
			CreateTween(tab.button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
			CreateTween(tab.icon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(150, 150, 160)}):Play()
			CreateTween(tab.text, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(150, 150, 160)}):Play()
			tab.content.Visible = false
		end

		-- Select this tab
		CreateTween(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundTransparency = 0}):Play()
		CreateTween(TabIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(255, 255, 255)}):Play()
		CreateTween(TabText, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(255, 255, 255)}):Play()
		TabContent.Visible = true
		self.currentTab = name
	end

	TabButton.MouseButton1Click:Connect(SelectTab)

	-- Hover effects
	TabButton.MouseEnter:Connect(function()
		if self.currentTab ~= name then
			CreateTween(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundTransparency = 0.7}):Play()
		end
	end)

	TabButton.MouseLeave:Connect(function()
		if self.currentTab ~= name then
			CreateTween(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
		end
	end)

	Tab.button = TabButton
	Tab.content = TabContent
	Tab.icon = TabIcon
	Tab.text = TabText
	Tab.select = SelectTab

	self.tabs[name] = Tab

	-- Select first tab by default
	if #self.tabs == 1 then
		SelectTab()
	end

	return Tab
end

-- Section Class
function Window:CreateSection(parent, title)
	local SectionFrame = Instance.new("Frame")
	SectionFrame.Size = UDim2.new(1, 0, 0, 0)
	SectionFrame.AutomaticSize = Enum.AutomaticSize.Y
	SectionFrame.BackgroundTransparency = 1
	SectionFrame.Parent = parent

	local SectionTitle = Instance.new("TextLabel")
	SectionTitle.Size = UDim2.new(1, 0, 0, 30)
	SectionTitle.BackgroundTransparency = 1
	SectionTitle.Text = title
	SectionTitle.Font = Enum.Font.GothamBold
	SectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	SectionTitle.TextSize = 16
	SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
	SectionTitle.Parent = SectionFrame

	local SectionContent = Instance.new("Frame")
	SectionContent.Size = UDim2.new(1, 0, 0, 0)
	SectionContent.Position = UDim2.new(0, 0, 0, 30)
	SectionContent.AutomaticSize = Enum.AutomaticSize.Y
	SectionContent.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
	SectionContent.BorderSizePixel = 0
	SectionContent.Parent = SectionFrame

	local SectionCorner = Instance.new("UICorner")
	SectionCorner.CornerRadius = UDim.new(0, 8)
	SectionCorner.Parent = SectionContent

	local SectionStroke = Instance.new("UIStroke")
	SectionStroke.Color = Color3.fromRGB(50, 50, 60)
	SectionStroke.Thickness = 1
	SectionStroke.Parent = SectionContent

	local SectionLayout = Instance.new("UIListLayout")
	SectionLayout.Padding = UDim.new(0, 8)
	SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
	SectionLayout.Parent = SectionContent

	local SectionPadding = Instance.new("UIPadding")
	SectionPadding.PaddingTop = UDim.new(0, 12)
	SectionPadding.PaddingBottom = UDim.new(0, 12)
	SectionPadding.PaddingLeft = UDim.new(0, 12)
	SectionPadding.PaddingRight = UDim.new(0, 12)
	SectionPadding.Parent = SectionContent

	return SectionContent
end

-- Button Component
function Window:CreateButton(parent, text, callback)
	local ButtonFrame = Instance.new("Frame")
	ButtonFrame.Size = UDim2.new(1, 0, 0, 35)
	ButtonFrame.BackgroundTransparency = 1
	ButtonFrame.Parent = parent

	local Button = Instance.new("TextButton")
	Button.Size = UDim2.new(1, 0, 1, 0)
	Button.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
	Button.BorderSizePixel = 0
	Button.Text = text
	Button.Font = Enum.Font.GothamMedium
	Button.TextColor3 = Color3.fromRGB(255, 255, 255)
	Button.TextSize = 14
	Button.Parent = ButtonFrame

	local ButtonCorner = Instance.new("UICorner")
	ButtonCorner.CornerRadius = UDim.new(0, 6)
	ButtonCorner.Parent = Button

	local ButtonStroke = Instance.new("UIStroke")
	ButtonStroke.Color = Color3.fromRGB(70, 70, 80)
	ButtonStroke.Thickness = 1
	ButtonStroke.Parent = Button

	-- Hover effects
	Button.MouseEnter:Connect(function()
		CreateTween(Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(55, 55, 60)}):Play()
		CreateTween(ButtonStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Color = Color3.fromRGB(90, 90, 100)}):Play()
	end)

	Button.MouseLeave:Connect(function()
		CreateTween(Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(45, 45, 50)}):Play()
		CreateTween(ButtonStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Color = Color3.fromRGB(70, 70, 80)}):Play()
	end)

	Button.MouseButton1Click:Connect(callback)

	return Button
end

-- Toggle Component
function Window:CreateToggle(parent, text, defaultState, callback)
	local ToggleFrame = Instance.new("Frame")
	ToggleFrame.Size = UDim2.new(1, 0, 0, 35)
	ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
	ToggleFrame.BorderSizePixel = 0
	ToggleFrame.Parent = parent

	local ToggleCorner = Instance.new("UICorner")
	ToggleCorner.CornerRadius = UDim.new(0, 6)
	ToggleCorner.Parent = ToggleFrame

	local ToggleStroke = Instance.new("UIStroke")
	ToggleStroke.Color = Color3.fromRGB(60, 60, 70)
	ToggleStroke.Thickness = 1
	ToggleStroke.Parent = ToggleFrame

	local ToggleButton = Instance.new("TextButton")
	ToggleButton.Size = UDim2.new(1, -50, 1, 0)
	ToggleButton.BackgroundTransparency = 1
	ToggleButton.Text = text
	ToggleButton.Font = Enum.Font.GothamMedium
	ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	ToggleButton.TextSize = 14
	ToggleButton.TextXAlignment = Enum.TextXAlignment.Left
	ToggleButton.Parent = ToggleFrame

	local TogglePadding = Instance.new("UIPadding")
	TogglePadding.PaddingLeft = UDim.new(0, 12)
	TogglePadding.Parent = ToggleButton

	-- Toggle Switch
	local SwitchFrame = Instance.new("Frame")
	SwitchFrame.Size = UDim2.new(0, 40, 0, 20)
	SwitchFrame.Position = UDim2.new(1, -45, 0.5, -10)
	SwitchFrame.BackgroundColor3 = defaultState and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(60, 60, 70)
	SwitchFrame.BorderSizePixel = 0
	SwitchFrame.Parent = ToggleFrame

	local SwitchCorner = Instance.new("UICorner")
	SwitchCorner.CornerRadius = UDim.new(1, 0)
	SwitchCorner.Parent = SwitchFrame

	local SwitchKnob = Instance.new("Frame")
	SwitchKnob.Size = UDim2.new(0, 16, 0, 16)
	SwitchKnob.Position = defaultState and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
	SwitchKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SwitchKnob.BorderSizePixel = 0
	SwitchKnob.Parent = SwitchFrame

	local KnobCorner = Instance.new("UICorner")
	KnobCorner.CornerRadius = UDim.new(1, 0)
	KnobCorner.Parent = SwitchKnob

	local isToggled = defaultState

	local function UpdateToggle()
		local switchColor = isToggled and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(60, 60, 70)
		local knobPos = isToggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
		
		CreateTween(SwitchFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundColor3 = switchColor}):Play()
		CreateTween(SwitchKnob, TweenInfo.new(0.3, Enum.EasingStyle.Back), {Position = knobPos}):Play()
		
		if callback then callback(isToggled) end
	end

	-- Make both the button and switch clickable
	ToggleButton.MouseButton1Click:Connect(function()
		isToggled = not isToggled
		UpdateToggle()
	end)

	SwitchFrame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			isToggled = not isToggled
			UpdateToggle()
		end
	end)

	return function() return isToggled end, function(state) isToggled = state UpdateToggle() end
end

-- Dropdown Component
function Window:CreateDropdown(parent, text, options, defaultIndex, callback, getOptionsFunc)
	local DropdownFrame = Instance.new("Frame")
	DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
	DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
	DropdownFrame.BorderSizePixel = 0
	DropdownFrame.Parent = parent

	local DropdownCorner = Instance.new("UICorner")
	DropdownCorner.CornerRadius = UDim.new(0, 6)
	DropdownCorner.Parent = DropdownFrame

	local DropdownStroke = Instance.new("UIStroke")
	DropdownStroke.Color = Color3.fromRGB(60, 60, 70)
	DropdownStroke.Thickness = 1
	DropdownStroke.Parent = DropdownFrame

	local DropdownButton = Instance.new("TextButton")
	DropdownButton.Size = UDim2.new(1, 0, 1, 0)
	DropdownButton.BackgroundTransparency = 1
	DropdownButton.Text = text .. ": " .. (options[defaultIndex] or "None")
	DropdownButton.Font = Enum.Font.GothamMedium
	DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	DropdownButton.TextSize = 14
	DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
	DropdownButton.Parent = DropdownFrame

	local DropdownPadding = Instance.new("UIPadding")
	DropdownPadding.PaddingLeft = UDim.new(0, 12)
	DropdownPadding.PaddingRight = UDim.new(0, 12)
	DropdownPadding.Parent = DropdownButton

	local ArrowIcon = Instance.new("TextLabel")
	ArrowIcon.Size = UDim2.new(0, 20, 0, 20)
	ArrowIcon.Position = UDim2.new(1, -25, 0.5, -10)
	ArrowIcon.BackgroundTransparency = 1
	ArrowIcon.Text = "â–¼"
	ArrowIcon.TextSize = 12
	ArrowIcon.Font = Enum.Font.Gotham
	ArrowIcon.TextColor3 = Color3.fromRGB(200, 200, 200)
	ArrowIcon.Parent = DropdownButton

	local currentIndex = defaultIndex
	local currentOptions = options
	local selectedSeed = ""

	local function UpdateDropdown()
		if getOptionsFunc then
			currentOptions = getOptionsFunc()
			local optionKeys = {}
			for key, _ in pairs(currentOptions) do
				table.insert(optionKeys, key)
			end
			table.sort(optionKeys)
			
			if #optionKeys > 0 then
				if not selectedSeed or selectedSeed == "" or not currentOptions[selectedSeed] then
					selectedSeed = optionKeys[1]
				end
				DropdownButton.Text = text .. ": " .. selectedSeed .. " (" .. (currentOptions[selectedSeed] or 0) .. ")"
			else
				DropdownButton.Text = text .. ": None"
				selectedSeed = ""
			end
		end
	end

	DropdownButton.MouseButton1Click:Connect(function()
		if getOptionsFunc then
			currentOptions = getOptionsFunc()
			local optionKeys = {}
			for key, _ in pairs(currentOptions) do
				table.insert(optionKeys, key)
			end
			table.sort(optionKeys)
			
			if #optionKeys > 0 then
				local currentKeyIndex = 1
				for i, key in ipairs(optionKeys) do
					if key == selectedSeed then
						currentKeyIndex = i
						break
					end
				end
				
				currentKeyIndex = (currentKeyIndex % #optionKeys) + 1
				selectedSeed = optionKeys[currentKeyIndex]
				DropdownButton.Text = text .. ": " .. selectedSeed .. " (" .. (currentOptions[selectedSeed] or 0) .. ")"
				
				if callback then callback(selectedSeed, currentKeyIndex) end
			end
		else
			currentIndex = (currentIndex % #options) + 1
			DropdownButton.Text = text .. ": " .. options[currentIndex]
			
			if callback then callback(options[currentIndex], currentIndex) end
		end
		
		CreateTween(ArrowIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Rotation = 180}):Play()
		task.wait(0.1)
		CreateTween(ArrowIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Rotation = 0}):Play()
	end)

	return function() 
		if getOptionsFunc then
			return selectedSeed
		else
			return currentIndex 
		end
	end, function() 
		if getOptionsFunc then
			return selectedSeed
		else
			return options[currentIndex] 
		end
	end, UpdateDropdown
end

-- Slider Component
function Window:CreateSlider(parent, text, min, max, defaultValue, suffix, callback)
	local SliderFrame = Instance.new("Frame")
	SliderFrame.Size = UDim2.new(1, 0, 0, 50)
	SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
	SliderFrame.BorderSizePixel = 0
	SliderFrame.Parent = parent

	local SliderCorner = Instance.new("UICorner")
	SliderCorner.CornerRadius = UDim.new(0, 6)
	SliderCorner.Parent = SliderFrame

	local SliderStroke = Instance.new("UIStroke")
	SliderStroke.Color = Color3.fromRGB(60, 60, 70)
	SliderStroke.Thickness = 1
	SliderStroke.Parent = SliderFrame

	local SliderLabel = Instance.new("TextLabel")
	SliderLabel.Size = UDim2.new(1, -24, 0, 20)
	SliderLabel.Position = UDim2.new(0, 12, 0, 5)
	SliderLabel.BackgroundTransparency = 1
	SliderLabel.Text = text
	SliderLabel.Font = Enum.Font.GothamMedium
	SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	SliderLabel.TextSize = 14
	SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
	SliderLabel.Parent = SliderFrame

	local ValueLabel = Instance.new("TextLabel")
	ValueLabel.Size = UDim2.new(0, 60, 0, 20)
	ValueLabel.Position = UDim2.new(1, -72, 0, 5)
	ValueLabel.BackgroundTransparency = 1
	ValueLabel.Text = defaultValue .. (suffix or "")
	ValueLabel.Font = Enum.Font.GothamMedium
	ValueLabel.TextColor3 = Color3.fromRGB(150, 150, 160)
	ValueLabel.TextSize = 13
	ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
	ValueLabel.Parent = SliderFrame

	local SliderTrack = Instance.new("Frame")
	SliderTrack.Size = UDim2.new(1, -24, 0, 4)
	SliderTrack.Position = UDim2.new(0, 12, 1, -15)
	SliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
	SliderTrack.BorderSizePixel = 0
	SliderTrack.Parent = SliderFrame

	local TrackCorner = Instance.new("UICorner")
	TrackCorner.CornerRadius = UDim.new(1, 0)
	TrackCorner.Parent = SliderTrack

	local SliderFill = Instance.new("Frame")
	SliderFill.Size = UDim2.new((defaultValue - min) / (max - min), 0, 1, 0)
	SliderFill.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
	SliderFill.BorderSizePixel = 0
	SliderFill.Parent = SliderTrack

	local FillCorner = Instance.new("UICorner")
	FillCorner.CornerRadius = UDim.new(1, 0)
	FillCorner.Parent = SliderFill

	local SliderKnob = Instance.new("Frame")
	SliderKnob.Size = UDim2.new(0, 16, 0, 16)
	SliderKnob.Position = UDim2.new((defaultValue - min) / (max - min), -8, 0.5, -8)
	SliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SliderKnob.BorderSizePixel = 0
	SliderKnob.Parent = SliderTrack

	local KnobCorner = Instance.new("UICorner")
	KnobCorner.CornerRadius = UDim.new(1, 0)
	KnobCorner.Parent = SliderKnob

	local KnobStroke = Instance.new("UIStroke")
	KnobStroke.Color = Color3.fromRGB(100, 200, 100)
	KnobStroke.Thickness = 2
	KnobStroke.Parent = SliderKnob

	local currentValue = defaultValue
	local sliderDragging = false

	local function UpdateSlider(value)
		currentValue = math.clamp(value, min, max)
		local percentage = (currentValue - min) / (max - min)
		
		SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
		SliderKnob.Position = UDim2.new(percentage, -8, 0.5, -8)
		ValueLabel.Text = math.floor(currentValue) .. (suffix or "")
		
		if callback then callback(currentValue) end
	end

	SliderTrack.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			sliderDragging = true
			local percentage = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
			local value = min + (max - min) * percentage
			UpdateSlider(value)
		end
	end)

	SliderKnob.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			sliderDragging = true
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if sliderDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local percentage = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
			local value = min + (max - min) * percentage
			UpdateSlider(value)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			sliderDragging = false
		end
	end)

	-- Hover effects
	SliderTrack.MouseEnter:Connect(function()
		CreateTween(SliderKnob, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new((currentValue - min) / (max - min), -9, 0.5, -9)}):Play()
	end)

	SliderTrack.MouseLeave:Connect(function()
		if not sliderDragging then
			CreateTween(SliderKnob, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 16, 0, 16), Position = UDim2.new((currentValue - min) / (max - min), -8, 0.5, -8)}):Play()
		end
	end)

	return function() return currentValue end, UpdateSlider
end

-- Label Component
function Window:CreateLabel(parent, text)
	local LabelFrame = Instance.new("Frame")
	LabelFrame.Size = UDim2.new(1, 0, 0, 0)
	LabelFrame.AutomaticSize = Enum.AutomaticSize.Y
	LabelFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
	LabelFrame.BorderSizePixel = 0
	LabelFrame.Parent = parent

	local LabelCorner = Instance.new("UICorner")
	LabelCorner.CornerRadius = UDim.new(0, 6)
	LabelCorner.Parent = LabelFrame

	local Label = Instance.new("TextLabel")
	Label.Size = UDim2.new(1, 0, 0, 0)
	Label.AutomaticSize = Enum.AutomaticSize.Y
	Label.BackgroundTransparency = 1
	Label.Text = text
	Label.Font = Enum.Font.GothamMedium
	Label.TextColor3 = Color3.fromRGB(200, 200, 200)
	Label.TextSize = 12
	Label.TextXAlignment = Enum.TextXAlignment.Left
	Label.TextYAlignment = Enum.TextYAlignment.Top
	Label.TextWrapped = true
	Label.Parent = LabelFrame

	local LabelPadding = Instance.new("UIPadding")
	LabelPadding.PaddingTop = UDim.new(0, 8)
	LabelPadding.PaddingBottom = UDim.new(0, 8)
	LabelPadding.PaddingLeft = UDim.new(0, 8)
	LabelPadding.PaddingRight = UDim.new(0, 8)
	LabelPadding.Parent = Label

	return Label
end

-- Destroy function
function Window:Destroy()
	-- Animate out before destroying
	CreateTween(self.MainWindow, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
		Size = UDim2.new(0, 0, 0, 0),
		Position = UDim2.new(0.5, 0, 0.5, 0)
	}):Play()
	
	task.wait(0.4)
	self.ScreenGui:Destroy()
end

return RCSLib
