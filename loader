-- Rayfield Style UI Library
-- Modern, draggable, with tabs, keybind picker, color picker, and all widgets
-- Paste this in your CDN and use with loadstring()

local RCS = {}

-- Services
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer

-- Constants
local THEME = {
	Background = Color3.fromRGB(22, 22, 22),
	Panel = Color3.fromRGB(30, 30, 30),
	Accent = Color3.fromRGB(0, 132, 255),
	Text = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.Gotham
}

-- Create UI Root
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "RCS_RayfieldUI"
ScreenGui.Parent = CoreGui
ScreenGui.ResetOnSpawn = false

-- Drag utility
local function MakeDraggable(topbar, dragFrame)
	local dragging, offset
	topbar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			offset = input.Position - dragFrame.AbsolutePosition
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			dragFrame.Position = UDim2.new(0, input.Position.X - offset.X, 0, input.Position.Y - offset.Y)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
	end)
end

-- Main API
function RCS:CreateWindow(title)
	local Main = Instance.new("Frame")
	Main.Size = UDim2.new(0, 600, 0, 400)
	Main.Position = UDim2.new(0.5, -300, 0.5, -200)
	Main.BackgroundColor3 = THEME.Background
	Main.BorderSizePixel = 0
	Main.Parent = ScreenGui
	Main.Name = "MainUI"
	Main.ClipsDescendants = true

	local UICorner = Instance.new("UICorner", Main)
	UICorner.CornerRadius = UDim.new(0, 8)

	-- Topbar
	local Topbar = Instance.new("Frame")
	Topbar.Size = UDim2.new(1, 0, 0, 40)
	Topbar.BackgroundColor3 = THEME.Panel
	Topbar.BorderSizePixel = 0
	Topbar.Parent = Main

	local TopCorner = Instance.new("UICorner", Topbar)
	TopCorner.CornerRadius = UDim.new(0, 8)

	local Title = Instance.new("TextLabel")
	Title.Size = UDim2.new(1, -20, 1, 0)
	Title.Position = UDim2.new(0, 10, 0, 0)
	Title.BackgroundTransparency = 1
	Title.Text = title
	Title.Font = THEME.Font
	Title.TextSize = 18
	Title.TextColor3 = THEME.Text
	Title.TextXAlignment = Enum.TextXAlignment.Left
	Title.Parent = Topbar

	MakeDraggable(Topbar, Main)

	-- Tab Buttons
	local TabBar = Instance.new("Frame")
	TabBar.Size = UDim2.new(1, 0, 0, 36)
	TabBar.Position = UDim2.new(0, 0, 0, 40)
	TabBar.BackgroundColor3 = THEME.Background
	TabBar.BorderSizePixel = 0
	TabBar.Parent = Main

	local TabLayout = Instance.new("UIListLayout")
	TabLayout.FillDirection = Enum.FillDirection.Horizontal
	TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	TabLayout.Padding = UDim.new(0, 4)
	TabLayout.Parent = TabBar

	-- Pages
	local Pages = Instance.new("Frame")
	Pages.Size = UDim2.new(1, -20, 1, -86)
	Pages.Position = UDim2.new(0, 10, 0, 76)
	Pages.BackgroundColor3 = THEME.Panel
	Pages.BorderSizePixel = 0
	Pages.Parent = Main
	Instance.new("UICorner", Pages).CornerRadius = UDim.new(0, 6)

	local pageList = {}
	local selectedTab = nil

	local function SelectTab(tabName)
		for name, page in pairs(pageList) do
			page.Visible = (name == tabName)
		end
	end

	local function CreateTab(name)
		local Button = Instance.new("TextButton")
		Button.Text = name
		Button.Size = UDim2.new(0, 100, 1, 0)
		Button.BackgroundColor3 = THEME.Panel
		Button.TextColor3 = THEME.Text
		Button.Font = THEME.Font
		Button.TextSize = 14
		Button.AutoButtonColor = false
		Button.Parent = TabBar
		Instance.new("UICorner", Button).CornerRadius = UDim.new(0, 6)

		local Page = Instance.new("ScrollingFrame")
		Page.Size = UDim2.new(1, 0, 1, 0)
		Page.BackgroundTransparency = 1
		Page.BorderSizePixel = 0
		Page.Visible = false
		Page.ScrollingDirection = Enum.ScrollingDirection.Y
		Page.CanvasSize = UDim2.new(0, 0, 1, 0)
		Page.Parent = Pages

		local Layout = Instance.new("UIListLayout")
		Layout.Padding = UDim.new(0, 10)
		Layout.SortOrder = Enum.SortOrder.LayoutOrder
		Layout.Parent = Page

		Button.MouseButton1Click:Connect(function()
			SelectTab(name)
		end)

		pageList[name] = Page
		if not selectedTab then
			selectedTab = name
			Page.Visible = true
		end

		return Page
	end

	return {
		CreateTab = CreateTab,
		Main = Main,
		Theme = THEME
	}
end

return RCS
